{"version":3,"sources":["xslet.datatype.js"],"names":["xslet","Rect","obj","left","validate","right","width","top","bottom","height","rect","Object","defineProperty","enumerable","get","set","v","value","defaultValue","defineDatatype","datatype"],"mappings":";;;;AAWAA,MAAA,mBAAAA,UAAAA,MAEA,WACA,YAaA,SAAAC,GAAAC,GACAA,EAAAA,KAEA,IAAAC,GAAAC,EAAAF,EAAAC,KAAA,GACAE,EAAAD,EAAAF,EAAAG,MAAAF,GACAG,EAAAF,EAAAF,EAAAI,MAAAD,EAAAF,GACAI,EAAAH,EAAAF,EAAAK,IAAA,GACAC,EAAAJ,EAAAF,EAAAM,OAAAD,GACAE,EAAAL,EAAAF,EAAAO,OAAAD,EAAAD,GAEAG,IAoHA,OAzGAC,QAAAC,eAAAF,EAAA,QACAG,YAAA,EACAC,IAAA,WACA,MAAAX,IAEAY,IAAA,SAAAC,GACAb,EAAAC,EAAAY,EAAAb,MAaAQ,OAAAC,eAAAF,EAAA,OACAG,YAAA,EACAC,IAAA,WACA,MAAAP,IAEAQ,IAAA,SAAAC,GACAT,EAAAH,EAAAY,EAAAT,MAaAI,OAAAC,eAAAF,EAAA,SACAG,YAAA,EACAC,IAAA,WACA,MAAAX,GAAAG,GAEAS,IAAA,SAAAC,GACAV,EAAAF,EAAAY,EAAAb,EAAAG,GAAAH,KAaAQ,OAAAC,eAAAF,EAAA,UACAG,YAAA,EACAC,IAAA,WACA,MAAAP,GAAAE,GAEAM,IAAA,SAAAC,GACAP,EAAAL,EAAAY,EAAAT,EAAAE,GAAAF,KAaAI,OAAAC,eAAAF,EAAA,SACAG,YAAA,EACAC,IAAA,WACA,MAAAR,IAEAS,IAAA,SAAAC,GACAV,EAAAF,EAAAY,EAAAV,MAaAK,OAAAC,eAAAF,EAAA,UACAG,YAAA,EACAC,IAAA,WACA,MAAAL,IAEAM,IAAA,SAAAC,GACAP,EAAAL,EAAAY,EAAAP,MAIAC,EAGA,QAAAN,GAAAa,EAAAC,GACA,MAAA,gBAAAD,GACAA,EAGAC,EAUA,QAAAC,GAAAnB,GAMAW,OAAAC,eAAAZ,EAAA,YACAa,YAAA,EACAI,WAGAN,OAAAC,eAAAZ,EAAAoB,SAAA,QACAP,YAAA,EACAI,MAAAhB,IAzKAkB,EAAAnB","file":"xslet.datatype.min.js","sourcesContent":["/*!\n * Copyright (C) 2016 xslet project.\n * This software is released under the MIT license.\n */\n\n/**\n * Is the top namespace of all xslet modules.\n *\n * @namespace xslet\n * @global\n */\n;xslet = (typeof xslet === 'undefined') ? {} : xslet;\n\n(function(){\n  'use strict';\n  defineDatatype(xslet);\n\n\n/**\n * @class xslet.datatype.Rect\n * @classdesc Represents a rectangle.\n *   The instance of this class has properties of corner positions and size of\n *   a rectangle.\n *\n * @param obj {object} - An object which has all or any of properties of corner\n *   positions or size of a rectangle.\n */\nfunction Rect(obj) {\n  obj = obj || {};\n\n  var left = validate(obj.left, 0),\n      right = validate(obj.right, left),\n      width = validate(obj.width, right - left),\n      top = validate(obj.top, 0),\n      bottom = validate(obj.bottom, top),\n      height = validate(obj.height, bottom - top);\n\n  var rect = {};\n\n  /**\n   * The left position of this rectangle.\n   * If this value is changed, the `right` property is also changed but `width`\n   * property is not changed..\n   *\n   * @var {number} left\n   * @memberof xslet.datatype.Rect\n   * @instance\n   */\n  Object.defineProperty(rect, 'left', {\n    enumerable: true,\n    get: function() {\n      return left;\n    },\n    set: function(v) {\n      left = validate(v, left);\n    },\n  });\n\n  /**\n   * The top position of this rectangle.\n   * If this value is changed, the `bottom` property is also changed but\n   * `height` is not changed.\n   *\n   * @var {number} top\n   * @memberof xslet.datatype.Rect\n   * @instance\n   */\n  Object.defineProperty(rect, 'top', {\n    enumerable: true,\n    get: function() {\n      return top;\n    },\n    set: function(v) {\n      top = validate(v, top);\n    },\n  });\n\n  /**\n   * The right position of this rectangle.\n   * If this value is changed, the `width` property is also changed but `left`\n   * property is not changed.\n   *\n   * @var {number} right\n   * @memberof xslet.datatype.Rect\n   * @instance\n   */\n  Object.defineProperty(rect, 'right', {\n    enumerable: true,\n    get: function() {\n      return left + width;\n    },\n    set: function(v) {\n      width = validate(v, left + width) - left;\n    },\n  });\n\n  /**\n   * The bottom position of this rectangle.\n   * If this value is changed, the `height` property is also changed but `top`\n   * property is not changed..\n   *\n   * @var {number} bottom\n   * @memberof xslet.datatype.Rect\n   * @instance\n   */\n  Object.defineProperty(rect, 'bottom', {\n    enumerable: true,\n    get: function() {\n      return top + height;\n    },\n    set: function(v) {\n      height = validate(v, top + height) - top;\n    },\n  });\n\n  /**\n   * Width of this rectangle.\n   * If this value is changed, the 'right' property is also changed but `left`\n   * property is not changed.\n   *\n   * @var {number} width\n   * @memberof xslet.datatype.Rect\n   * @instance\n   */\n  Object.defineProperty(rect, 'width', {\n    enumerable: true,\n    get: function() {\n      return width;\n    },\n    set: function(v) {\n      width = validate(v, width);\n    },\n  });\n\n  /**\n   * Height of this rectangle.\n   * If this value is changed, the 'bottom' property is also changed but `top`\n   * property is not changed.\n   *\n   * @var {number} height\n   * @memberof xslet.datatype.Rect\n   * @instance\n   */\n  Object.defineProperty(rect, 'height', {\n    enumerable: true,\n    get: function() {\n      return height;\n    },\n    set: function(v) {\n      height = validate(v, height);\n    },\n  });\n\n  return rect;\n}\n\nfunction validate(value, defaultValue) {\n  if (typeof value === 'number') {\n    return value;\n  }\n\n  return defaultValue;\n}\n\n\n/**\n * Defines `xslet.datatype` namespace.\n *\n * @private\n * @param xslet {object} - `xslet` namespace object.\n */\nfunction defineDatatype(xslet) {\n  /**\n   * Is the namespace to define useful data types.\n   *\n   * @namespace xslet.datatype\n   */\n  Object.defineProperty(xslet, 'datatype', {\n    enumerable: true,\n    value: {},\n  });\n\n  Object.defineProperty(xslet.datatype, 'Rect', {\n    enumerable: true,\n    value: Rect,\n  });\n}\n\n}());\n"]}